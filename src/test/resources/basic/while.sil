
var f: Int

method t1(n: Int) returns ()
    requires n > 0
{
    var i: Int := 0

    while (i < n)
        invariant i <= n
    {
        i := i+1
    }
}

method t2(n: Int) returns ()
    requires n > 0
{
    var i: Int := 0

    while (i < n)
        //:: ExpectedError(invariant.not.preserved:assertion.false)
        invariant i < n
    {
        i := i+1
    }
}

method t3(n: Int) returns ()
    requires n > 0
{
    var i: Int := 2

    while (i < n)
        //:: ExpectedError(invariant.not.established:assertion.false)
        invariant i <= n
    {
        i := i+1
    }
}

method t4(n: Int, r: Ref) returns ()
    requires n > 0
{
    var i: Int := 2

    //:: ExpectedError(while.failed:insufficient.permission)
    while (i < (r.f))
    {
        i := i+1
    }
}

method t5(n: Int, r: Ref) returns ()
    requires n > 0
    requires acc(r.f, write)
{
    var i: Int := 2

    while (i < (r.f))
        invariant acc(r.f, write)
    {
        i := i+1
    }
}