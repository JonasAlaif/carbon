field f: Int
field g: Int

predicate p1(a:Ref) {
	acc(a.f)
}

predicate p2(a:Ref, b:Int) {
	acc(a.g)
}


//different predicate
method m4(r:Ref, i:Int)
 requires acc(p1(r))
 ensures acc(p1(r))
 {
 	inhale forall x:Int :: x > 0 ==> acc(p2(r, x))
 	unfold p1(r)
 	fold p1(r)
 	/*
 	exhale forall x:Int :: x > 0 ==> acc(p2(r, x))
 	unfold p1(r)
 	fold p1(r)
 	*/
 }