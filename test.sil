field f: Int
field g: Int

predicate pred(r:Ref) {
	acc(r.f)
}

function fun(r:Ref, i:Int) : Ref
{r}

method t1(xs:Seq[Ref], r: Ref, i:Int)
    requires forall x:Ref :: {x.f} x in xs ==> acc(fun(x, i).f)
    ensures forall x:Ref :: {x.f} x in xs ==> acc(fun(x, i).f)
    //requires forall x:Ref :: {x.f} x in xs ==> x.f > 0
{}